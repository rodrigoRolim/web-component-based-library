<template>
  <button class="my-button" data-id="button"></button>
</template>

<style>
  .my-button {
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
  }
  .my-button.primary {
    border: 1px solid rebeccapurple;
    background-color: rebeccapurple;
    color: white;
  }
  .my-button.secondary {
    border: 1px solid rgb(59, 29, 89);
    background-color: rgb(59, 29, 89);
    color: white;
  }
  .my-button.tertiary {
    border: 1px solid rgb(34, 17, 51);
    background-color: rgb(34, 17, 51);
    color: white;
  }
</style>

<script>
  class MyButton extends HTMLElement {
    static get observedAttributes() {
      return ['text', 'color']
    }

    constructor() {
      super()
      const shadow = this.attachShadow({ mode: 'open' })
      shadow.innerHTML = TEMPLATE_HTML
      shadow.adoptedStyleSheets = [sheet]

      this.$el = this.shadowRoot.querySelector('[data-id="button"]')
      this.setCustomEvent({ el: this.$el, eventName: 'greeting', detail: { message: 'Hello!' }})
    }

    connectedCallback() {
      this._mount()
    }

    attributeChangedCallback() {
      this._mount()
    }

    _mount() {
      this.$el.textContent = this.getAttribute('text') || ''
      this.$el.classList.add(this.getAttribute('color') || '')
    }

    setCustomEvent({ el, eventName, detail }) {
      const onCustomEvent = () => {
        const customEvent = new CustomEvent(eventName, {
          detail,
          bubbles: true,
          composed: true
        })
  
        this.dispatchEvent(customEvent)
      }

      el.onclick = onCustomEvent
    }
  }
  customElements.define('my-button', MyButton)
</script>